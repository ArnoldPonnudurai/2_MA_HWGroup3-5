class Graph:
    
    """
    This implementation is based on a connectivity matrix.
    """
    
    def __init__(self, nr_of_vertices: int) -> None:
        """
        Constructs an undirected graph with the specified number of vertices and no edges.
        """
        self.connectivity_matrix: list[list[int]] =  [
            [0 for _ in range(nr_of_vertices)]
            for _ in range(nr_of_vertices)
        ]
        
    def add_edge(self, vertex1: int, vertex2: int) -> None:
        """
        Adds an undirected edge between the specified vertices.
        """
        self.connectivity_matrix[vertex1][vertex2] = 1
        self.connectivity_matrix[vertex2][vertex1] = 1
        
    def remove_edge(self, vertex1: int, vertex2: int) -> None:
        """
        Removes an undirected edge between the specified vertices.
        """
        self.connectivity_matrix[vertex1][vertex2] = 0
        self.connectivity_matrix[vertex2][vertex1] = 0        
        
    def get_vertices(self) -> list[int]:
        """
        Returns a list with all the vertices: 0, 1, ..., nr_of_vertices - 1
        """
        return range(len(self.connectivity_matrix))
    
    def get_edges(self) -> list[tuple[int, int]]:
        """
        Returns a list with all the edges: [(0, 1), (0, 4), (1, 3)]
        
        Note that each edge appears only once, so all returned edges (i, j) 
        have the property j > i.
        """
        edges = []
        for i in range(len(self.connectivity_matrix)):
            for j in range(i + 1, len(self.connectivity_matrix)):
                if self.connectivity_matrix[i][j]:
                    edges.append((i, j))
        return edges

    def add_random_edges(self, edge_p: float) -> None:
        '''
        Adds random edges to the graph with the provided probability.

        :param edge_p: The probability of creating an edge between two nodes.
        '''
        rng = np.random.default_rng()
        for i in range(len(self.connectivity_matrix)):
            for j in range(i + 1, len(self.connectivity_matrix)):
                if rng.random() < edge_p:
                    self.add_edge(i, j)

    def neighbors(self, vertex: int) -> list[int]:
        '''
        Returns a list of neighbors for the specific vertex.
        '''
        return [i for i, connected in enumerate(self.connectivity_matrix[vertex]) if connected == 1]

    def number_of_neighbors(self, vertex: int) -> int:
        '''
        Returns the number of neighbors for the specific vertex.
        '''
        return len(self.neighbors(vertex))

    def plot(self) -> None:
        '''
        Plot the graph with NetworkX.
        '''
        # Make a NetworkX graph.
        nxg = nx.Graph()
        nxg.add_nodes_from(self.get_vertices())
        nxg.add_edges_from(self.get_edges())

        # Plot graph.
        layout = nx.circular_layout(nxg)
        plt.figure()
        nx.draw(nxg, pos=layout, with_labels=True)
        plt.show() 
    
    def __repr__(self) -> str:
        s = 'Graph G(V, E) with\n'
        s += f'V = {[v for v in self.get_vertices()]}\n'
        s += f'E = {self.get_edges()}'
        return s


    
